// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: ethernet.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EthernetService_GetEthernet_FullMethodName    = "/EthernetService/GetEthernet"
	EthernetService_GetEthernets_FullMethodName   = "/EthernetService/GetEthernets"
	EthernetService_PostEthernet_FullMethodName   = "/EthernetService/PostEthernet"
	EthernetService_PutEthernet_FullMethodName    = "/EthernetService/PutEthernet"
	EthernetService_DeleteEthernet_FullMethodName = "/EthernetService/DeleteEthernet"
)

// EthernetServiceClient is the client API for EthernetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthernetServiceClient interface {
	GetEthernet(ctx context.Context, in *GetEthernetRequest, opts ...grpc.CallOption) (*GetEthernetResponse, error)
	GetEthernets(ctx context.Context, in *GetEthernetsRequest, opts ...grpc.CallOption) (*GetEthernetsResponse, error)
	PostEthernet(ctx context.Context, in *PostEthernetRequest, opts ...grpc.CallOption) (*PostEthernetResponse, error)
	PutEthernet(ctx context.Context, in *PutEthernetRequest, opts ...grpc.CallOption) (*PutEthernetResponse, error)
	DeleteEthernet(ctx context.Context, in *DeleteEthernetRequest, opts ...grpc.CallOption) (*DeleteEthernetResponse, error)
}

type ethernetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthernetServiceClient(cc grpc.ClientConnInterface) EthernetServiceClient {
	return &ethernetServiceClient{cc}
}

func (c *ethernetServiceClient) GetEthernet(ctx context.Context, in *GetEthernetRequest, opts ...grpc.CallOption) (*GetEthernetResponse, error) {
	out := new(GetEthernetResponse)
	err := c.cc.Invoke(ctx, EthernetService_GetEthernet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetServiceClient) GetEthernets(ctx context.Context, in *GetEthernetsRequest, opts ...grpc.CallOption) (*GetEthernetsResponse, error) {
	out := new(GetEthernetsResponse)
	err := c.cc.Invoke(ctx, EthernetService_GetEthernets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetServiceClient) PostEthernet(ctx context.Context, in *PostEthernetRequest, opts ...grpc.CallOption) (*PostEthernetResponse, error) {
	out := new(PostEthernetResponse)
	err := c.cc.Invoke(ctx, EthernetService_PostEthernet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetServiceClient) PutEthernet(ctx context.Context, in *PutEthernetRequest, opts ...grpc.CallOption) (*PutEthernetResponse, error) {
	out := new(PutEthernetResponse)
	err := c.cc.Invoke(ctx, EthernetService_PutEthernet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethernetServiceClient) DeleteEthernet(ctx context.Context, in *DeleteEthernetRequest, opts ...grpc.CallOption) (*DeleteEthernetResponse, error) {
	out := new(DeleteEthernetResponse)
	err := c.cc.Invoke(ctx, EthernetService_DeleteEthernet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthernetServiceServer is the server API for EthernetService service.
// All implementations must embed UnimplementedEthernetServiceServer
// for forward compatibility
type EthernetServiceServer interface {
	GetEthernet(context.Context, *GetEthernetRequest) (*GetEthernetResponse, error)
	GetEthernets(context.Context, *GetEthernetsRequest) (*GetEthernetsResponse, error)
	PostEthernet(context.Context, *PostEthernetRequest) (*PostEthernetResponse, error)
	PutEthernet(context.Context, *PutEthernetRequest) (*PutEthernetResponse, error)
	DeleteEthernet(context.Context, *DeleteEthernetRequest) (*DeleteEthernetResponse, error)
	mustEmbedUnimplementedEthernetServiceServer()
}

// UnimplementedEthernetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEthernetServiceServer struct {
}

func (UnimplementedEthernetServiceServer) GetEthernet(context.Context, *GetEthernetRequest) (*GetEthernetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthernet not implemented")
}
func (UnimplementedEthernetServiceServer) GetEthernets(context.Context, *GetEthernetsRequest) (*GetEthernetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthernets not implemented")
}
func (UnimplementedEthernetServiceServer) PostEthernet(context.Context, *PostEthernetRequest) (*PostEthernetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEthernet not implemented")
}
func (UnimplementedEthernetServiceServer) PutEthernet(context.Context, *PutEthernetRequest) (*PutEthernetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEthernet not implemented")
}
func (UnimplementedEthernetServiceServer) DeleteEthernet(context.Context, *DeleteEthernetRequest) (*DeleteEthernetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEthernet not implemented")
}
func (UnimplementedEthernetServiceServer) mustEmbedUnimplementedEthernetServiceServer() {}

// UnsafeEthernetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthernetServiceServer will
// result in compilation errors.
type UnsafeEthernetServiceServer interface {
	mustEmbedUnimplementedEthernetServiceServer()
}

func RegisterEthernetServiceServer(s grpc.ServiceRegistrar, srv EthernetServiceServer) {
	s.RegisterService(&EthernetService_ServiceDesc, srv)
}

func _EthernetService_GetEthernet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthernetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetServiceServer).GetEthernet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetService_GetEthernet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetServiceServer).GetEthernet(ctx, req.(*GetEthernetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetService_GetEthernets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthernetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetServiceServer).GetEthernets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetService_GetEthernets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetServiceServer).GetEthernets(ctx, req.(*GetEthernetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetService_PostEthernet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostEthernetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetServiceServer).PostEthernet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetService_PostEthernet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetServiceServer).PostEthernet(ctx, req.(*PostEthernetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetService_PutEthernet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEthernetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetServiceServer).PutEthernet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetService_PutEthernet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetServiceServer).PutEthernet(ctx, req.(*PutEthernetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthernetService_DeleteEthernet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEthernetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthernetServiceServer).DeleteEthernet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthernetService_DeleteEthernet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthernetServiceServer).DeleteEthernet(ctx, req.(*DeleteEthernetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthernetService_ServiceDesc is the grpc.ServiceDesc for EthernetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthernetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EthernetService",
	HandlerType: (*EthernetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEthernet",
			Handler:    _EthernetService_GetEthernet_Handler,
		},
		{
			MethodName: "GetEthernets",
			Handler:    _EthernetService_GetEthernets_Handler,
		},
		{
			MethodName: "PostEthernet",
			Handler:    _EthernetService_PostEthernet_Handler,
		},
		{
			MethodName: "PutEthernet",
			Handler:    _EthernetService_PutEthernet_Handler,
		},
		{
			MethodName: "DeleteEthernet",
			Handler:    _EthernetService_DeleteEthernet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethernet.proto",
}
