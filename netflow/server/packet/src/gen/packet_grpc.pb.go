// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: packet.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PacketService_GetPacket_FullMethodName    = "/PacketService/GetPacket"
	PacketService_GetPackets_FullMethodName   = "/PacketService/GetPackets"
	PacketService_PostPacket_FullMethodName   = "/PacketService/PostPacket"
	PacketService_PutPacket_FullMethodName    = "/PacketService/PutPacket"
	PacketService_DeletePacket_FullMethodName = "/PacketService/DeletePacket"
)

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketServiceClient interface {
	GetPacket(ctx context.Context, in *GetPacketRequest, opts ...grpc.CallOption) (*GetPacketResponse, error)
	GetPackets(ctx context.Context, in *GetPacketsRequest, opts ...grpc.CallOption) (*GetPacketsResponse, error)
	PostPacket(ctx context.Context, in *PostPacketRequest, opts ...grpc.CallOption) (*PostPacketResponse, error)
	PutPacket(ctx context.Context, in *PutPacketRequest, opts ...grpc.CallOption) (*PutPacketResponse, error)
	DeletePacket(ctx context.Context, in *DeletePacketRequest, opts ...grpc.CallOption) (*DeletePacketResponse, error)
}

type packetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketServiceClient(cc grpc.ClientConnInterface) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) GetPacket(ctx context.Context, in *GetPacketRequest, opts ...grpc.CallOption) (*GetPacketResponse, error) {
	out := new(GetPacketResponse)
	err := c.cc.Invoke(ctx, PacketService_GetPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetServiceClient) GetPackets(ctx context.Context, in *GetPacketsRequest, opts ...grpc.CallOption) (*GetPacketsResponse, error) {
	out := new(GetPacketsResponse)
	err := c.cc.Invoke(ctx, PacketService_GetPackets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetServiceClient) PostPacket(ctx context.Context, in *PostPacketRequest, opts ...grpc.CallOption) (*PostPacketResponse, error) {
	out := new(PostPacketResponse)
	err := c.cc.Invoke(ctx, PacketService_PostPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetServiceClient) PutPacket(ctx context.Context, in *PutPacketRequest, opts ...grpc.CallOption) (*PutPacketResponse, error) {
	out := new(PutPacketResponse)
	err := c.cc.Invoke(ctx, PacketService_PutPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetServiceClient) DeletePacket(ctx context.Context, in *DeletePacketRequest, opts ...grpc.CallOption) (*DeletePacketResponse, error) {
	out := new(DeletePacketResponse)
	err := c.cc.Invoke(ctx, PacketService_DeletePacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketServiceServer is the server API for PacketService service.
// All implementations must embed UnimplementedPacketServiceServer
// for forward compatibility
type PacketServiceServer interface {
	GetPacket(context.Context, *GetPacketRequest) (*GetPacketResponse, error)
	GetPackets(context.Context, *GetPacketsRequest) (*GetPacketsResponse, error)
	PostPacket(context.Context, *PostPacketRequest) (*PostPacketResponse, error)
	PutPacket(context.Context, *PutPacketRequest) (*PutPacketResponse, error)
	DeletePacket(context.Context, *DeletePacketRequest) (*DeletePacketResponse, error)
	mustEmbedUnimplementedPacketServiceServer()
}

// UnimplementedPacketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPacketServiceServer struct {
}

func (UnimplementedPacketServiceServer) GetPacket(context.Context, *GetPacketRequest) (*GetPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacket not implemented")
}
func (UnimplementedPacketServiceServer) GetPackets(context.Context, *GetPacketsRequest) (*GetPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackets not implemented")
}
func (UnimplementedPacketServiceServer) PostPacket(context.Context, *PostPacketRequest) (*PostPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPacket not implemented")
}
func (UnimplementedPacketServiceServer) PutPacket(context.Context, *PutPacketRequest) (*PutPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPacket not implemented")
}
func (UnimplementedPacketServiceServer) DeletePacket(context.Context, *DeletePacketRequest) (*DeletePacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePacket not implemented")
}
func (UnimplementedPacketServiceServer) mustEmbedUnimplementedPacketServiceServer() {}

// UnsafePacketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketServiceServer will
// result in compilation errors.
type UnsafePacketServiceServer interface {
	mustEmbedUnimplementedPacketServiceServer()
}

func RegisterPacketServiceServer(s grpc.ServiceRegistrar, srv PacketServiceServer) {
	s.RegisterService(&PacketService_ServiceDesc, srv)
}

func _PacketService_GetPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).GetPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_GetPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).GetPacket(ctx, req.(*GetPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketService_GetPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).GetPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_GetPackets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).GetPackets(ctx, req.(*GetPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketService_PostPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).PostPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_PostPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).PostPacket(ctx, req.(*PostPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketService_PutPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).PutPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_PutPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).PutPacket(ctx, req.(*PutPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PacketService_DeletePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).DeletePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PacketService_DeletePacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).DeletePacket(ctx, req.(*DeletePacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketService_ServiceDesc is the grpc.ServiceDesc for PacketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPacket",
			Handler:    _PacketService_GetPacket_Handler,
		},
		{
			MethodName: "GetPackets",
			Handler:    _PacketService_GetPackets_Handler,
		},
		{
			MethodName: "PostPacket",
			Handler:    _PacketService_PostPacket_Handler,
		},
		{
			MethodName: "PutPacket",
			Handler:    _PacketService_PutPacket_Handler,
		},
		{
			MethodName: "DeletePacket",
			Handler:    _PacketService_DeletePacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packet.proto",
}
